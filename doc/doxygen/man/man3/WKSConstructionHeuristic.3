.TH "WKSConstructionHeuristic" 3 "Thu Aug 17 2017" "Version 0.5.1" "steghide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
WKSConstructionHeuristic \- a heuristic algorithm for constructing a matching  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <WKSConstructionHeuristic\&.h>\fP
.PP
Inherits \fBMatchingAlgorithm\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBLongerShortestEdge\fP"
.br
.RI "a comparison operator "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBWKSConstructionHeuristic\fP (\fBGraph\fP *g, \fBMatching\fP *m, float goal=100\&.0)"
.br
.ti -1c
.RI "virtual \fB~WKSConstructionHeuristic\fP (void)"
.br
.ti -1c
.RI "const char * \fBgetName\fP (void) const"
.br
.ti -1c
.RI "void \fBrun\fP (void)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBVertex\fP * \fBfindVertexDeg1\fP (void)"
.br
.ti -1c
.RI "\fBVertex\fP * \fBfindVertexDegG\fP (void)"
.br
.ti -1c
.RI "void \fBcheckNeighboursDeg1\fP (\fBVertex\fP *v)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::priority_queue< \fBVertex\fP *, std::vector< \fBVertex\fP * >, \fBLongerShortestEdge\fP > \fBVerticesDeg1\fP"
.br
.RI "contains all vertices of degree 1 - every vertex in this queue has a correct shortest edge if it still has degree 1 "
.ti -1c
.RI "std::priority_queue< \fBVertex\fP *, std::vector< \fBVertex\fP * >, \fBLongerShortestEdge\fP > \fBVerticesDegG\fP"
.br
.RI "contains all vertices with degree greater than 1 "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This class implements a construction heuristic for the maximum matching problem\&. The idea for the algorithm is taken from Michael Sipser, Richard M\&. Karp: 'Maximum matchings in sparse random graphs', in 22nd Annual Symposium on Foundations of Computer Science\&. The modification consists of the priority queues, resp\&. of the fact that the vertices in the priority queues are ordered by the length of their shortest edge, thus creating a weighted version of this heuristic by biasing the algorithm to choose shorter edges on average\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "WKSConstructionHeuristic::WKSConstructionHeuristic (\fBGraph\fP * g, \fBMatching\fP * m, float goal = \fC100\&.0\fP)"

.PP
\fBParameters:\fP
.RS 4
\fIg\fP the underlying graph 
.br
\fIm\fP the inital matching (should be empty) 
.RE
.PP

.SS "virtual WKSConstructionHeuristic::~WKSConstructionHeuristic (void)\fC [inline]\fP, \fC [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "void WKSConstructionHeuristic::checkNeighboursDeg1 (\fBVertex\fP * v)\fC [private]\fP"
copy all Neighbours of v that have degree 1 to VerticesDeg1 
.SS "\fBVertex\fP * WKSConstructionHeuristic::findVertexDeg1 (void)\fC [private]\fP"
get the \fBVertex\fP from VerticesDeg1 that is nearest to top (with updated degrees and shortest edges) 
.SS "\fBVertex\fP * WKSConstructionHeuristic::findVertexDegG (void)\fC [private]\fP"
get the \fBVertex\fP from VerticesDegG that is nearest to top (with updated degrees and shortest edges) 
.SS "const char* WKSConstructionHeuristic::getName (void) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBMatchingAlgorithm\fP\&.
.SS "void WKSConstructionHeuristic::run (void)\fC [virtual]\fP"

.PP
Implements \fBMatchingAlgorithm\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "std::priority_queue<\fBVertex\fP*, std::vector<\fBVertex\fP*>, \fBLongerShortestEdge\fP> WKSConstructionHeuristic::VerticesDeg1\fC [private]\fP"

.SS "std::priority_queue<\fBVertex\fP*, std::vector<\fBVertex\fP*>, \fBLongerShortestEdge\fP> WKSConstructionHeuristic::VerticesDegG\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for steghide from the source code\&.
