.TH "WavFile" 3 "Thu Aug 17 2017" "Version 0.5.1" "steghide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
WavFile
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <WavFile\&.h>\fP
.PP
Inherits \fBCvrStgFile\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBWavFile\fP (void)"
.br
.ti -1c
.RI "\fBWavFile\fP (\fBBinaryIO\fP *io)"
.br
.ti -1c
.RI "\fB~WavFile\fP (void)"
.br
.ti -1c
.RI "void \fBread\fP (\fBBinaryIO\fP *io)"
.br
.ti -1c
.RI "void \fBwrite\fP (void)"
.br
.ti -1c
.RI "std::list< \fBCvrStgFile::Property\fP > \fBgetProperties\fP (void) const"
.br
.ti -1c
.RI "unsigned long \fBgetNumSamples\fP (void) const"
.br
.ti -1c
.RI "void \fBreplaceSample\fP (const \fBSamplePos\fP pos, const \fBSampleValue\fP *s)"
.br
.ti -1c
.RI "\fBSampleValue\fP * \fBgetSampleValue\fP (\fBSamplePos\fP pos) const"
.br
.ti -1c
.RI "std::vector< \fBSampleValueAdjacencyList\fP * > \fBcalcSVAdjacencyLists\fP (const std::vector< \fBSampleValue\fP *> &svs) const"
.br
.ti -1c
.RI "std::vector< \fBMatchingAlgorithm\fP * > \fBgetMatchingAlgorithms\fP (\fBGraph\fP *g, \fBMatching\fP *m) const"
.br
.ti -1c
.RI "unsigned short \fBgetBitsPerSample\fP (void) const"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBreadheaders\fP (void)"
.br
.ti -1c
.RI "void \fBreaddata\fP (void)"
.br
.ti -1c
.RI "void \fBwriteheaders\fP (void)"
.br
.ti -1c
.RI "void \fBwritedata\fP (void)"
.br
.ti -1c
.RI "void \fBcalcpos\fP (\fBSamplePos\fP n, unsigned long *bytepos, unsigned short *firstbitpos) const"
.br
.ti -1c
.RI "unsigned short \fBgetFirstBitPosinSample\fP (void)"
.br
.ti -1c
.RI "unsigned short \fBgetBytesPerSample\fP (void)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBWavChunkHeader\fP * \fBriffchhdr\fP"
.br
.ti -1c
.RI "char \fBid_wave\fP [4]"
.br
.ti -1c
.RI "\fBWavFormatChunk\fP * \fBFormatChunk\fP"
.br
.ti -1c
.RI "\fBWavChunkHeader\fP * \fBdatachhdr\fP"
.br
.ti -1c
.RI "std::vector< unsigned char > \fBdata_small\fP"
.br
.RI "this std::vector contains the wav data if BitsPerSample <= 8 "
.ti -1c
.RI "std::vector< int > \fBdata_large\fP"
.br
.RI "this std::vector contains the wav data if BitsPerSample >8 "
.ti -1c
.RI "std::vector< \fBWavChunkUnused\fP * > \fBUnusedBeforeData\fP"
.br
.ti -1c
.RI "std::vector< \fBBYTE\fP > \fBUnusedAfterData\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static const signed short \fBFormatPCM\fP = 1"
.br
.ti -1c
.RI "static const unsigned short \fBSamplesPerVertex\fP = 2"
.br
.ti -1c
.RI "static const \fBUWORD32\fP \fBRadius_small\fP = 1"
.br
.ti -1c
.RI "static const \fBUWORD32\fP \fBRadius_large\fP = 20"
.br
.ti -1c
.RI "static const \fBEmbValue\fP \fBEmbValueModulus\fP = 2"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Constructor & Destructor Documentation"
.PP 
.SS "WavFile::WavFile (void)"

.SS "WavFile::WavFile (\fBBinaryIO\fP * io)"

.SS "WavFile::~WavFile (void)"

.SH "Member Function Documentation"
.PP 
.SS "void WavFile::calcpos (\fBSamplePos\fP n, unsigned long * bytepos, unsigned short * firstbitpos) const\fC [private]\fP"

.SS "std::vector< \fBSampleValueAdjacencyList\fP * > WavFile::calcSVAdjacencyLists (const std::vector< \fBSampleValue\fP *> & svs) const\fC [virtual]\fP"
calculate a vector a SampleValueAdjacencyLists 
.PP
\fBParameters:\fP
.RS 4
\fIsvs\fP a vector of unique(!) sample values where svs[i]->getLabel() == i holds for all i 
.RE
.PP
\fBReturns:\fP
.RS 4
a vector of SampleValueAdjacencyLists where retval[i] only contains sample values with getEmbValue() == i
.RE
.PP
Every row in the adjacency lists must be sorted in the following order: The first sample value has the least distance to the source sample value, the last has the largest distance\&. If two sample values in one row have the same distance to the source sample value, the order does not matter\&.
.PP
May be overridden in derived class to provide a faster version\&. 
.PP
Reimplemented from \fBCvrStgFile\fP\&.
.SS "unsigned short WavFile::getBitsPerSample (void) const"

.SS "unsigned short WavFile::getBytesPerSample (void)\fC [private]\fP"

.SS "unsigned short WavFile::getFirstBitPosinSample (void)\fC [private]\fP"
get the position of the first bit (of the first byte) containing the actual sample data 
.PP
\fBReturns:\fP
.RS 4
the bit position (where 0 is the lsb and 7 the msb) 
.RE
.PP

.SS "std::vector< \fBMatchingAlgorithm\fP * > WavFile::getMatchingAlgorithms (\fBGraph\fP * g, \fBMatching\fP * m) const\fC [virtual]\fP"
get recommended list of matching algorithms 
.PP
\fBParameters:\fP
.RS 4
\fIm\fP an empty matching - will be used in construction of \fBMatchingAlgorithm\fP objects
.RE
.PP
The \fBMatchingAlgorithm\fP objects returned by this function should be deleted by the caller if they are no longer needed\&. 
.PP
Reimplemented from \fBCvrStgFile\fP\&.
.SS "unsigned long WavFile::getNumSamples (void) const\fC [virtual]\fP"
get the number of samples in this \fBCvrStgObject\fP 
.PP
Implements \fBCvrStgObject\fP\&.
.SS "std::list< \fBCvrStgFile::Property\fP > WavFile::getProperties (void) const\fC [virtual]\fP"

.PP
Implements \fBCvrStgFile\fP\&.
.SS "\fBSampleValue\fP * WavFile::getSampleValue (\fBSamplePos\fP pos) const\fC [virtual]\fP"
get the sample at position pos 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP the position of a sample (must be in 0\&.\&.\&.\fBgetNumSamples()\fP-1) 
.RE
.PP
\fBReturns:\fP
.RS 4
the sample at the given position
.RE
.PP
The sample object is created in this function and should be deleted by the caller\&. The derived class should check the condition(s) given above in its Implementation of this function\&. 
.PP
Implements \fBCvrStgObject\fP\&.
.SS "void WavFile::read (\fBBinaryIO\fP * io)\fC [virtual]\fP"

.PP
Reimplemented from \fBCvrStgFile\fP\&.
.SS "void WavFile::readdata (void)\fC [private]\fP"

.SS "void WavFile::readheaders (void)\fC [private]\fP"

.SS "void WavFile::replaceSample (const \fBSamplePos\fP pos, const \fBSampleValue\fP * s)\fC [virtual]\fP"
replace a sample thus (possibly) altering the value of the bit returned by SampleValue->getBit() 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP the position of the sample (must be in 0\&.\&.\&.\fBgetNumSamples()\fP-1) 
.br
\fIs\fP the sample value that should replace the current sample value (must be of correct type for this \fBCvrStgObject\fP)
.RE
.PP
The derived class should check the condition(s) given above in its Implementation of this function\&. 
.PP
Implements \fBCvrStgObject\fP\&.
.SS "void WavFile::write (void)\fC [virtual]\fP"

.PP
Reimplemented from \fBCvrStgFile\fP\&.
.SS "void WavFile::writedata (void)\fC [private]\fP"

.SS "void WavFile::writeheaders (void)\fC [private]\fP"

.SH "Member Data Documentation"
.PP 
.SS "std::vector<int> WavFile::data_large\fC [private]\fP"

.SS "std::vector<unsigned char> WavFile::data_small\fC [private]\fP"

.SS "\fBWavChunkHeader\fP* WavFile::datachhdr\fC [private]\fP"

.SS "const \fBEmbValue\fP WavFile::EmbValueModulus = 2\fC [static]\fP, \fC [private]\fP"

.SS "\fBWavFormatChunk\fP* WavFile::FormatChunk\fC [private]\fP"

.SS "const signed short WavFile::FormatPCM = 1\fC [static]\fP, \fC [private]\fP"

.SS "char WavFile::id_wave[4]\fC [private]\fP"

.SS "const \fBUWORD32\fP WavFile::Radius_large = 20\fC [static]\fP, \fC [private]\fP"

.SS "const \fBUWORD32\fP WavFile::Radius_small = 1\fC [static]\fP, \fC [private]\fP"

.SS "\fBWavChunkHeader\fP* WavFile::riffchhdr\fC [private]\fP"

.SS "const unsigned short WavFile::SamplesPerVertex = 2\fC [static]\fP, \fC [private]\fP"

.SS "std::vector<\fBBYTE\fP> WavFile::UnusedAfterData\fC [private]\fP"

.SS "std::vector<\fBWavChunkUnused\fP*> WavFile::UnusedBeforeData\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for steghide from the source code\&.
