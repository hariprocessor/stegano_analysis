.TH "BmpFile" 3 "Thu Aug 17 2017" "Version 0.5.1" "steghide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BmpFile
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <BmpFile\&.h>\fP
.PP
Inherits \fBCvrStgFile\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBstruct_BITMAPCOREHEADER\fP"
.br
.ti -1c
.RI "struct \fBstruct_BITMAPFILEHEADER\fP"
.br
.ti -1c
.RI "struct \fBstruct_BITMAPINFOHEADER\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBmpFile\fP (void)"
.br
.ti -1c
.RI "\fBBmpFile\fP (\fBBinaryIO\fP *io)"
.br
.ti -1c
.RI "\fB~BmpFile\fP (void)"
.br
.ti -1c
.RI "void \fBread\fP (\fBBinaryIO\fP *io)"
.br
.ti -1c
.RI "void \fBwrite\fP (void)"
.br
.ti -1c
.RI "std::list< \fBCvrStgFile::Property\fP > \fBgetProperties\fP (void) const"
.br
.ti -1c
.RI "std::vector< \fBMatchingAlgorithm\fP * > \fBgetMatchingAlgorithms\fP (\fBGraph\fP *g, \fBMatching\fP *m) const"
.br
.ti -1c
.RI "unsigned long \fBgetNumSamples\fP (void) const"
.br
.ti -1c
.RI "void \fBreplaceSample\fP (const \fBSamplePos\fP pos, const \fBSampleValue\fP *s)"
.br
.ti -1c
.RI "\fBSampleValue\fP * \fBgetSampleValue\fP (\fBSamplePos\fP pos) const"
.br
.ti -1c
.RI "std::vector< \fBSampleValueAdjacencyList\fP * > \fBcalcSVAdjacencyLists\fP (const std::vector< \fBSampleValue\fP *> &svs) const"
.br
.ti -1c
.RI "unsigned short \fBgetBitCount\fP (void) const"
.br
.ti -1c
.RI "unsigned long \fBgetWidth\fP (void) const"
.br
.ti -1c
.RI "unsigned long \fBgetHeight\fP (void) const"
.br
.ti -1c
.RI "\fBColorPalette\fP * \fBgetPalette\fP (void) const"
.br
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "typedef struct \fBBmpFile::struct_BITMAPFILEHEADER\fP \fBBITMAPFILEHEADER\fP"
.br
.ti -1c
.RI "typedef struct \fBBmpFile::struct_BITMAPINFOHEADER\fP \fBBITMAPINFOHEADER\fP"
.br
.ti -1c
.RI "typedef struct \fBBmpFile::struct_BITMAPCOREHEADER\fP \fBBITMAPCOREHEADER\fP"
.br
.in -1c
.SS "Private Types"

.in +1c
.ti -1c
.RI "enum \fBSUBFORMAT\fP { \fBWIN\fP, \fBOS2\fP }"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBreadheaders\fP ()"
.br
.ti -1c
.RI "void \fBbmpwin_readheaders\fP ()"
.br
.ti -1c
.RI "void \fBbmpos2_readheaders\fP ()"
.br
.ti -1c
.RI "void \fBwriteheaders\fP ()"
.br
.ti -1c
.RI "void \fBbmpwin_writeheaders\fP ()"
.br
.ti -1c
.RI "void \fBbmpos2_writeheaders\fP ()"
.br
.ti -1c
.RI "void \fBreaddata\fP ()"
.br
.ti -1c
.RI "void \fBwritedata\fP ()"
.br
.ti -1c
.RI "void \fBcalcIndex\fP (\fBSamplePos\fP pos, unsigned long *index, unsigned short *firstbit) const"
.br
.ti -1c
.RI "unsigned long \fBcalcLinelength\fP ()"
.br
.ti -1c
.RI "\fBSUBFORMAT\fP \fBgetSubformat\fP (void) const"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBSUBFORMAT\fP \fBsubformat\fP"
.br
.ti -1c
.RI "\fBBITMAPFILEHEADER\fP \fBbmfh\fP"
.br
.ti -1c
.RI "\fBBITMAPINFOHEADER\fP \fBbmih\fP"
.br
.ti -1c
.RI "\fBBITMAPCOREHEADER\fP \fBbmch\fP"
.br
.ti -1c
.RI "\fBColorPalette\fP * \fBPalette\fP"
.br
.ti -1c
.RI "std::vector< std::vector< unsigned char > > \fBbitmap\fP"
.br
.ti -1c
.RI "std::vector< \fBBYTE\fP > \fBBitmapData\fP"
.br
.ti -1c
.RI "std::vector< \fBBYTE\fP > \fBatend\fP"
.br
.RI "contains bytes that are appended at the end of the bitmap data (some image editors apparently do this) "
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static const unsigned int \fBIdBm\fP = 19778"
.br
.ti -1c
.RI "static const unsigned short \fBSizeBMFILEHEADER\fP = 14"
.br
.ti -1c
.RI "static const unsigned short \fBSizeBMINFOHEADER\fP = 40"
.br
.ti -1c
.RI "static const unsigned short \fBSizeBMCOREHEADER\fP = 12"
.br
.ti -1c
.RI "static const unsigned int \fBCOMPRESSION_BI_RGB\fP = 0"
.br
.ti -1c
.RI "static const unsigned short \fBSamplesPerVertex_SmallPalette\fP = 2"
.br
.ti -1c
.RI "static const unsigned short \fBSamplesPerVertex_LargePalette\fP = 3"
.br
.ti -1c
.RI "static const unsigned short \fBSamplesPerVertex_RGB\fP = 2"
.br
.ti -1c
.RI "static const \fBUWORD32\fP \fBRadius_Palette\fP = 400"
.br
.RI "the default radius for palette images (400 = 20^2) "
.ti -1c
.RI "static const \fBUWORD32\fP \fBRadius_RGB\fP = 100"
.br
.RI "the default radius for RGB images (100 = 10^2) "
.ti -1c
.RI "static const \fBEmbValue\fP \fBEmbValueModulus_SmallPalette\fP = 2"
.br
.ti -1c
.RI "static const \fBEmbValue\fP \fBEmbValueModulus_LargePalette\fP = 4"
.br
.ti -1c
.RI "static const \fBEmbValue\fP \fBEmbValueModulus_RGB\fP = 4"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Member Typedef Documentation"
.PP 
.SS "typedef struct \fBBmpFile::struct_BITMAPCOREHEADER\fP  \fBBmpFile::BITMAPCOREHEADER\fP\fC [protected]\fP"

.SS "typedef struct \fBBmpFile::struct_BITMAPFILEHEADER\fP  \fBBmpFile::BITMAPFILEHEADER\fP\fC [protected]\fP"

.SS "typedef struct \fBBmpFile::struct_BITMAPINFOHEADER\fP  \fBBmpFile::BITMAPINFOHEADER\fP\fC [protected]\fP"

.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBBmpFile::SUBFORMAT\fP\fC [private]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIWIN \fP\fP
.TP
\fB\fIOS2 \fP\fP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "BmpFile::BmpFile (void)"

.SS "BmpFile::BmpFile (\fBBinaryIO\fP * io)"

.SS "BmpFile::~BmpFile (void)"

.SH "Member Function Documentation"
.PP 
.SS "void BmpFile::bmpos2_readheaders ()\fC [private]\fP"

.SS "void BmpFile::bmpos2_writeheaders ()\fC [private]\fP"

.SS "void BmpFile::bmpwin_readheaders ()\fC [private]\fP"

.SS "void BmpFile::bmpwin_writeheaders ()\fC [private]\fP"

.SS "void BmpFile::calcIndex (\fBSamplePos\fP pos, unsigned long * index, unsigned short * firstbit) const\fC [private]\fP"
translate a sample position into a <index,firstbit> pair 'pointing' into the BitmapData array 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP a sample position 
.br
\fIindex\fP a pointer to a variable that will contain the array index used to access the pos-th sample 
.br
\fIfirstbit\fP the firstbit in BitmapData[index] that belongs to the sample with the given position 
.RE
.PP

.SS "unsigned long BmpFile::calcLinelength ()\fC [private]\fP"

.SS "std::vector< \fBSampleValueAdjacencyList\fP * > BmpFile::calcSVAdjacencyLists (const std::vector< \fBSampleValue\fP *> & svs) const\fC [virtual]\fP"
calculate a vector a SampleValueAdjacencyLists 
.PP
\fBParameters:\fP
.RS 4
\fIsvs\fP a vector of unique(!) sample values where svs[i]->getLabel() == i holds for all i 
.RE
.PP
\fBReturns:\fP
.RS 4
a vector of SampleValueAdjacencyLists where retval[i] only contains sample values with getEmbValue() == i
.RE
.PP
Every row in the adjacency lists must be sorted in the following order: The first sample value has the least distance to the source sample value, the last has the largest distance\&. If two sample values in one row have the same distance to the source sample value, the order does not matter\&.
.PP
May be overridden in derived class to provide a faster version\&. 
.PP
Reimplemented from \fBCvrStgFile\fP\&.
.SS "unsigned short BmpFile::getBitCount (void) const"

.SS "unsigned long BmpFile::getHeight (void) const"

.SS "std::vector< \fBMatchingAlgorithm\fP * > BmpFile::getMatchingAlgorithms (\fBGraph\fP * g, \fBMatching\fP * m) const\fC [virtual]\fP"
get recommended list of matching algorithms 
.PP
\fBParameters:\fP
.RS 4
\fIm\fP an empty matching - will be used in construction of \fBMatchingAlgorithm\fP objects
.RE
.PP
The \fBMatchingAlgorithm\fP objects returned by this function should be deleted by the caller if they are no longer needed\&. 
.PP
Reimplemented from \fBCvrStgFile\fP\&.
.SS "unsigned long BmpFile::getNumSamples (void) const\fC [virtual]\fP"
get the number of samples in this \fBCvrStgObject\fP 
.PP
Implements \fBCvrStgObject\fP\&.
.SS "\fBColorPalette\fP * BmpFile::getPalette (void) const"

.SS "std::list< \fBCvrStgFile::Property\fP > BmpFile::getProperties (void) const\fC [virtual]\fP"

.PP
Implements \fBCvrStgFile\fP\&.
.SS "\fBSampleValue\fP * BmpFile::getSampleValue (\fBSamplePos\fP pos) const\fC [virtual]\fP"
get the sample at position pos 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP the position of a sample (must be in 0\&.\&.\&.\fBgetNumSamples()\fP-1) 
.RE
.PP
\fBReturns:\fP
.RS 4
the sample at the given position
.RE
.PP
The sample object is created in this function and should be deleted by the caller\&. The derived class should check the condition(s) given above in its Implementation of this function\&. 
.PP
Implements \fBCvrStgObject\fP\&.
.SS "\fBBmpFile::SUBFORMAT\fP BmpFile::getSubformat (void) const\fC [private]\fP"

.SS "unsigned long BmpFile::getWidth (void) const"

.SS "void BmpFile::read (\fBBinaryIO\fP * io)\fC [virtual]\fP"

.PP
Reimplemented from \fBCvrStgFile\fP\&.
.SS "void BmpFile::readdata ()\fC [private]\fP"

.SS "void BmpFile::readheaders ()\fC [private]\fP"

.SS "void BmpFile::replaceSample (const \fBSamplePos\fP pos, const \fBSampleValue\fP * s)\fC [virtual]\fP"
replace a sample thus (possibly) altering the value of the bit returned by SampleValue->getBit() 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP the position of the sample (must be in 0\&.\&.\&.\fBgetNumSamples()\fP-1) 
.br
\fIs\fP the sample value that should replace the current sample value (must be of correct type for this \fBCvrStgObject\fP)
.RE
.PP
The derived class should check the condition(s) given above in its Implementation of this function\&. 
.PP
Implements \fBCvrStgObject\fP\&.
.SS "void BmpFile::write (void)\fC [virtual]\fP"

.PP
Reimplemented from \fBCvrStgFile\fP\&.
.SS "void BmpFile::writedata ()\fC [private]\fP"

.SS "void BmpFile::writeheaders ()\fC [private]\fP"

.SH "Member Data Documentation"
.PP 
.SS "std::vector<\fBBYTE\fP> BmpFile::atend\fC [private]\fP"

.SS "std::vector<std::vector <unsigned char> > BmpFile::bitmap\fC [private]\fP"
contains the bitmap in the following format bitmap[i] is the pixel data of the i-th row of the bitmap bitmap[i][j] is the j-th byte of the pixel data of the i-th row of the bitmap if bitcount is < 8 then bitmap[i][j] contains the pixels as read in from the file (i\&.e\&. in the 'wrong' direction) this is taken care of in the calcRCB function 
.SS "std::vector<\fBBYTE\fP> BmpFile::BitmapData\fC [private]\fP"
contains the bitmap data in the same order as read from file (but without padding bytes) 
.SS "\fBBITMAPCOREHEADER\fP BmpFile::bmch\fC [private]\fP"

.SS "\fBBITMAPFILEHEADER\fP BmpFile::bmfh\fC [private]\fP"

.SS "\fBBITMAPINFOHEADER\fP BmpFile::bmih\fC [private]\fP"

.SS "const unsigned int BmpFile::COMPRESSION_BI_RGB = 0\fC [static]\fP, \fC [private]\fP"

.SS "const \fBEmbValue\fP BmpFile::EmbValueModulus_LargePalette = 4\fC [static]\fP, \fC [private]\fP"

.SS "const \fBEmbValue\fP BmpFile::EmbValueModulus_RGB = 4\fC [static]\fP, \fC [private]\fP"

.SS "const \fBEmbValue\fP BmpFile::EmbValueModulus_SmallPalette = 2\fC [static]\fP, \fC [private]\fP"

.SS "const unsigned int BmpFile::IdBm = 19778\fC [static]\fP, \fC [private]\fP"

.SS "\fBColorPalette\fP* BmpFile::Palette\fC [private]\fP"

.SS "const \fBUWORD32\fP BmpFile::Radius_Palette = 400\fC [static]\fP, \fC [private]\fP"

.SS "const \fBUWORD32\fP BmpFile::Radius_RGB = 100\fC [static]\fP, \fC [private]\fP"

.SS "const unsigned short BmpFile::SamplesPerVertex_LargePalette = 3\fC [static]\fP, \fC [private]\fP"

.SS "const unsigned short BmpFile::SamplesPerVertex_RGB = 2\fC [static]\fP, \fC [private]\fP"

.SS "const unsigned short BmpFile::SamplesPerVertex_SmallPalette = 2\fC [static]\fP, \fC [private]\fP"

.SS "const unsigned short BmpFile::SizeBMCOREHEADER = 12\fC [static]\fP, \fC [private]\fP"

.SS "const unsigned short BmpFile::SizeBMFILEHEADER = 14\fC [static]\fP, \fC [private]\fP"

.SS "const unsigned short BmpFile::SizeBMINFOHEADER = 40\fC [static]\fP, \fC [private]\fP"

.SS "\fBSUBFORMAT\fP BmpFile::subformat\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for steghide from the source code\&.
